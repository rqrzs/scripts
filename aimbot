local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local heartbeat = game:GetService("RunService").Heartbeat

-- Function to calculate target position with prediction
local function GetTargetPosition(target)
    if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
        local targetPosition = target.Character.HumanoidRootPart.Position
        local targetVelocity = target.Character.HumanoidRootPart.Velocity
        -- Predictive aiming
        return targetPosition + targetVelocity * getgenv().AimbotSettings.Prediction
    end
    return nil
end

-- Aimbot Silent Aim Logic
local function CalculateSilentAimVelocity()
    local SilentVelocity
    local SilentTarget = getgenv().AimbotSettings.Target

    if getgenv().AimbotSettings.OverrideYAxis == false then
        SilentVelocity = Vector3.new(SilentVelocity.X, 0, SilentVelocity.Z)
    else
        if SilentTarget and SilentTarget.Character then
            if getgenv().AimbotSettings.OverrideYAxis == false then
                SilentVelocity = Vector3.new(SilentTarget.Character.HumanoidRootPart.Velocity.X, 0,
                    SilentTarget.Character.HumanoidRootPart.Velocity.Z)
            else
                SilentVelocity = SilentTarget.Character.HumanoidRootPart.Velocity
            end
        end
    end
    
    return SilentVelocity
end

-- Resolver Logic
local function Resolver()
    while true do
        heartbeat:Wait()
        if getgenv().AimbotSettings.ResolverEnabled and getgenv().AimbotSettings.Target then
            local character = getgenv().AimbotSettings.Target.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local lastPosition = character.HumanoidRootPart.Position
                task.wait()
                local currentPosition = character.HumanoidRootPart.Position
                local velocity = (currentPosition - lastPosition) * 0
                character.HumanoidRootPart.AssemblyLinearVelocity = velocity
                character.HumanoidRootPart.Velocity = velocity
            end
        end
    end
end

-- Start the resolver in a separate thread
coroutine.wrap(Resolver)()

-- Function to toggle aimbot and set the target
local function ToggleAimbot(input)
    if input.KeyCode == getgenv().AimbotSettings.Keybind then
        getgenv().AimbotSettings.Enabled = not getgenv().AimbotSettings.Enabled        
        if getgenv().AimbotSettings.Enabled then
            getgenv().AimbotSettings.Target = nil -- Reset target when enabling
        end
    end
end

-- Connect the toggle function to UserInputService
UserInputService.InputBegan:Connect(ToggleAimbot)

-- Main loop
RunService.RenderStepped:Connect(function()
    if getgenv().AimbotSettings.Enabled then
        if not getgenv().AimbotSettings.Target then
            local mousePosition = UserInputService:GetMouseLocation() -- Get the cursor position on the screen
            local closestPlayer = nil
            local closestDistance = math.huge

            -- Find closest enemy to the mouse position
            for _, enemy in pairs(game.Players:GetPlayers()) do
                if enemy ~= player and enemy.Character and enemy.Character:FindFirstChild("HumanoidRootPart") then
                    local enemyPosition = camera:WorldToScreenPoint(enemy.Character.HumanoidRootPart.Position) -- Convert world position to screen space
                    local distance = (mousePosition - Vector2.new(enemyPosition.X, enemyPosition.Y)).Magnitude -- Calculate distance to mouse

                    if distance < closestDistance then
                        closestDistance = distance
                        closestPlayer = enemy
                    end
                end
            end

            getgenv().AimbotSettings.Target = closestPlayer -- Set the aimbot target to the closest player
        end

        -- Aimbot functionality
        if getgenv().AimbotSettings.Target then
            local targetPosition = GetTargetPosition(getgenv().AimbotSettings.Target)
            if targetPosition then
                -- Anti-groundshot logic with strength factor
                local targetY = getgenv().AimbotSettings.Target.Character.HumanoidRootPart.Position.Y
                local cameraY = camera.CFrame.Position.Y
                
                -- Randomize aim slightly for human-like behavior
                local aimOffsetX = math.random() * getgenv().AimbotSettings.AimOffset - (getgenv().AimbotSettings.AimOffset / 2)
                local aimOffsetY = math.random() * getgenv().AimbotSettings.AimOffset - (getgenv().AimbotSettings.AimOffset / 2)

                if cameraY < targetY then
                    local direction = (targetPosition - camera.CFrame.Position).unit
                    local newCFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
                    camera.CFrame = camera.CFrame:Lerp(newCFrame, getgenv().AimbotSettings.Smoothness + math.random() * getgenv().AimbotSettings.InconsistentSmoothnessFactor - (getgenv().AimbotSettings.InconsistentSmoothnessFactor / 2))
                else
                    -- Calculate the adjusted height based on anti-groundshot strength
                    local adjustedHeight = targetY + (getgenv().AimbotSettings.AntiGroundshotStrength * (cameraY - targetY))
                    local adjustedPosition = Vector3.new(targetPosition.X + aimOffsetX, adjustedHeight, targetPosition.Z + aimOffsetY)
                    local direction = (adjustedPosition - camera.CFrame.Position).unit
                    local newCFrame = CFrame.new(camera.CFrame.Position, camera.CFrame.Position + direction)
                    camera.CFrame = camera.CFrame:Lerp(newCFrame, getgenv().AimbotSettings.Smoothness + math.random() * getgenv().AimbotSettings.InconsistentSmoothnessFactor - (getgenv().AimbotSettings.InconsistentSmoothnessFactor / 2))
                end

                -- Handle shot delay with inconsistency
                if tick() - getgenv().AimbotSettings.LastShotTime >= getgenv().AimbotSettings.ShotDelay + (math.random() * getgenv().AimbotSettings.ShotDelay) then
                    -- Insert shooting logic here, e.g., fire a projectile
                    -- For example: player:FireWeapon()

                    -- Add fake miss chance
                    if math.random() < getgenv().AimbotSettings.MissChance then
                    else
                        getgenv().AimbotSettings.LastShotTime = tick() -- Update the last shot time
                    end
                end
            end
        end
    else
        getgenv().AimbotSettings.Target = nil -- Reset target when aimbot is disabled
    end
end)
